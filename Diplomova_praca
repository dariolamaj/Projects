import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()
X_train.shape
y_train[:5]
y_train = y_train.reshape(-1,)
y_train[:5]
classes = ["airplane",'automobile',"bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]
plot_sample(X_train,y_train,0)
#normalize data
X_train = X_train / 255.0
X_test = X_test / 255.0
cnn = models.Sequential([
    
    #cnn
    layers.Conv2D(filters=32, kernel_size = (3,3), activation = "relu", input_shape = (32,32,3)),
    layers.MaxPooling2D((2,2)),
    
    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    
    

    
    # dense
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation = 'softmax')
])    
cnn.compile(optimizer = 'adam',
           loss = 'sparse_categorical_crossentropy',
           metrics=['accuracy'])
 cnn.fit(X_train,y_train, epochs=10)
  cnn.evaluate(X_test,y_test)
  y_pred = cnn.predict(X_test)
  y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5]
y_test[:5]
plot_sample(X_test, y_test,3)
y_pred = cnn.predict(X_test)
y_pred[:5]
y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5]
y_test[:5]
y_test = y_test.reshape(-1,)
y_test[:5]
plot_sample(X_test, y_test,3)
classes[y_classes[3]]
